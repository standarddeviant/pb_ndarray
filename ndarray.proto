syntax = "proto3";

// dtype adapted from https://github.com/telamonian/numpy-protobuf/blob/master/protobuf/npbuf/type/dtype.proto
/**
 * aiming for a minimal representation based on the numpy.dtype Python class.
 * See https://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html
 */
enum ByteOrder {
    LITTLE_ENDIAN = 0;    // '<' order
    BIG_ENDIAN    = 1;    // '>' order
    NATIVE        = 2;    // '=' order
    NA            = 3;    // '|' order (not applicable)
}

// the labels of the Type enum are all parsable by np.dtype()
enum ElementType {
    float64	      =  0; // Double precision float: sign bit, 11 bits exponent, 52 bits mantissa
    float32	      =  1; // Single precision float: sign bit, 8 bits exponent, 23 bits mantissa
    float16	      =  2; // Half precision float: sign bit, 5 bits exponent, 10 bits mantissa
    complex128    =  3; // Complex number, represented by two 64-bit floats (real and imaginary components)
    complex64     =  4; // Complex number, represented by two 32-bit floats (real and imaginary components)
    uint64	      =  5; // Unsigned integer (0 to 18446744073709551615)
    uint32	      =  6; // Unsigned integer (0 to 4294967295)
    uint16	      =  7; // Unsigned integer (0 to 65535)
    uint8	        =  8; // Unsigned integer (0 to 255)
    int64	        =  9; // Integer (-9223372036854775808 to 9223372036854775807)
    int32	        = 10; // Integer (-2147483648 to 2147483647)
    int16	        = 11; // Integer (-32768 to 32767)
    int8	        = 12; // Byte (-128 to 127)
    complexint32  = 13; // Complex int, represented by two 16-bit ints (real + imag)
    complexint64  = 14; // Complex int, represented by two 16-bit ints (real + imag)
    complexint128 = 15; // Complex int, represented by two 32-bit ints (real + imag)
    // S128       = 13;   // String, 1 byte for every character, 128 bytes total
    // S64        = 14;   // String, 1 byte for every character, 64 bytes total
    // S32        = 15;   // String, 1 byte for every character, 32 bytes total
    // S16        = 16;   // String, 1 byte for every character, 16 bytes total
    // S8         = 17;   // String, 1 byte for every character, 8 bytes total
}


// ndarray adapted from https://github.com/telamonian/numpy-protobuf/blob/master/protobuf/npbuf/type/ndarray.proto
/**
 * aiming for a minimal representation based the __array_interface__
 * see https://docs.scipy.org/doc/numpy/reference/arrays.interface.html
 */
message ndarray {
    repeated uint32 shape = 1;
    ElementType eltype = 2;
    ByteOrder byte_order = 3;
    bytes data = 4;
    string shape_description = 5;
    fixed32 crc = 6;
}

